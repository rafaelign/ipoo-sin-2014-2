#BlueJ class context
comment0.params=
comment0.target=Prova()
comment0.text=\n\ Construtor\ para\ objetos\ da\ classe\ Prova\n
comment1.params=n
comment1.target=void\ mostrarTermosSerie(int)
comment1.text=\n\ Elabore\ um\ m\u00E9todo\ (assinatura\ e\ implementa\u00E7\u00E3o)\ que\ recebe\ um\ n\u00FAmero\ inteiro\ e\ maior\ do\ que\ zero\n\ (n)\ por\ par\u00E2metro\ e\ mostra\ para\ o\ usu\u00E1rio,\ em\ modo\ texto,\ n\ termos\ da\ s\u00E9rie\ abaixo\:\n\ S\u00E9rie\ \=\ 2,\ 7,\ 3,\ 4,\ 21,\ 12,\ 8,\ 63,\ 48,\ 16,\ 189,\ 192,\ 32,\ 567,\ 768,\ ....\!\n\ Dica\:\ aten\u00E7\u00E3o\ para\ a\ rela\u00E7\u00E3o\ entre\ os\ termos\ 2,\ ,\ ,\ 4,\ ,\ ,\ 8\ o\ mesmo\ vale\ para\n\ 7,\ ,\ 21,\ ,\ 63\ e\ tamb\u00E9m\ 3,\ ,\ ,12,\ ,\ 48\ ou\ seja,\ s\u00E3o\ 3\ seq\u00FC\u00EAncias\ dentro\ de\ uma\ s\u00F3.\ (3,0)\!\n
comment2.params=n
comment2.target=boolean\ ehPrimo(int)
comment2.text=\n\ Construa\ dois\ m\u00E9todos,\n\ \n\ o\ primeiro\ (chamado\ ehPrimo)\ recebe\ um\ n\u00FAmero\ inteiro\ positivo\ \n\ por\ par\u00E2metro\ e\ retorna\ verdadeiro\ caso\ o\ n\u00FAmero\ seja\ primo\ e\ falso\ caso\ contr\u00E1rio.\ \n\ Um\ n\u00FAmero\ primo\ \u00E9\ um\ n\u00FAmero\ somente\ divis\u00EDvel\ por\ 1\ e\ por\ ele\ mesmo.\ \n\ \n\ O\ segundo\ m\u00E9todo\ (chamado\ proxPrimo)\ recebe\ um\ n\u00FAmero\ inteiro\ positivo\ por\ par\u00E2metro\ e\ \n\ retorna\ o\ pr\u00F3ximo\ n\u00FAmero\ primo\ ap\u00F3s\ o\ par\u00E2metro\ (ex.\:\ 8\ \u2014>\ 11;\ 10\ \u2014>\ 11;\ 3\ \u2014>\ 5).\ \n\ \n\ Considere\ que\ ambos\ m\u00E9todos\ est\u00E3o\ na\ mesma\ classe\ e\ a\ implementa\u00E7\u00E3o\ do\ m\u00E9todo\ proxPrimo\ deve,\ \n\ obrigatoriamente,\ utilizar\ o\ m\u00E9todo\ ehPrimo.\n
comment3.params=n
comment3.target=int\ proxPrimo(int)
comment4.params=cad\ inicio\ fim
comment4.target=int\ saldosNaFaixa(Cadastro,\ double,\ double)
comment4.text=\n\ Elabore\ o\ seguinte\ m\u00E9todo\ em\ Java\ (implementa\u00E7\u00E3o)\:\ \n\ public\ int\ saldosNaFaixa\ (Cadastro\ cad,\ double\ inicio,\ double\ fim).\ \n\ Este\ m\u00E9todo\ recebe\ por\ par\u00E2metro\ um\ objeto\ do\ tipo\ Cadastro.\ A\ classe\ Cadastro\ possui\ o\ m\u00E9todo\ \n\ public\ ContaCorrente\ proxConta(),\ \n\ o\ qual,\ sempre\ que\ for\ executado,\ retorna\ a\ pr\u00F3xima\ conta\ corrente\ do\ cadastro.\ \n\ Esta\ classe\ possui\ tamb\u00E9m\ o\ m\u00E9todo\ \n\ public\ int\ qtContas()\ \n\ o\ qual\ retorna\ a\ quantidade\ de\ contas\ cadastradas.\u2028\n\ \n\ O\ m\u00E9todo\ saldosNaFaixa\ deve\ retornar\ a\ quantidade\ de\ contas\ correntes,\ do\ cadastro,\ \n\ cujo\ saldo\ est\u00E1\ na\ faixa\ definida\ pelos\ par\u00E2metros\ inicio\ (inclusive)\ e\ fim\ (inclusive).\ \n\ A\ classe\ ContaCorrente\ possui\ os\ seguintes\ m\u00E9todos\:\ \n\ public\ double\ informaSaldo()\ -\ retorna\ o\ saldo\ da\ conta;\ \n\ public\ String\ informaNConta()\ -\ retorna\ o\ n\u00FAmero\ da\ conta.\n\ As\ classes\ Cadastro\ e\ ContaCorrente\ j\u00E1\ est\u00E3o\ prontas,\ n\u00E3o\ \u00E9\ necess\u00E1rio\ implement\u00E1-las,\ \n\ implemente\ apenas\ o\ m\u00E9todo\ saldosNaFaixa,\ o\ qual\ est\u00E1\ em\ outra\ classe\ qualquer.\n
numComments=5
